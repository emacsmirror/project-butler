#+title: Project Butler
#+author: Stefan Thesing
#+language: en
#+texinfo_dir_category: Emacs misc features
#+texinfo_filename: project-butler.info
#+texinfo_dir_title: Project Butler: (project-butler)
#+texinfo_dir_desc: Extension to project.el to lay out buffers and windows

#+HTML: <a href="https://melpa.org/#/project-butler"><img alt="MELPA" src="https://melpa.org/packages/project-butler-badge.svg"/></a>
#+HTML: <a href="https://stable.melpa.org/#/project-butler"><img alt="MELPA Stable" src="https://stable.melpa.org/packages/project-butler-badge.svg"/></a>
#+HTML: <img src="images/all-laid-out.png" align="right">

* Introduction

Project Butler is a little add-on to Emacs' built-in =project.el=. It lets you
declare buffer/window arrangements in your config and lays them out for you. It
also cleans up after you.

* Installation

** MELPA

Project Butler is available on (M)ELPA. You can install it using the package
manager of your choice, e.g. by running ~package-install~ and selecting
=project-butler=.

Or by adding it to the selected packages in your Emacs configuration before running
~package-install-selected-packages~:
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'project-butler)
  (package-install-selected-packages :noconfirm)
#+end_src

Or using use-package:
#+begin_src emacs-lisp
  (use-package project-butler
    :ensure t)
#+end_src

** Manually

To install it manually, clone the git repository to a directory of your choice,
e.g. =~/project-butler/= and make it available to Emacs. Please note that it
requires Emacs 28.1 or later.

For example:
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/project-butler/")
  (require 'project-butler)
#+end_src

or using =use-package=:
#+begin_src emacs-lisp
  (use-package project-butler
      :ensure nil
      :load-path "~/project-butler/")
  (require 'project-butler)
#+end_src

* Basic Configuration

Project Butler provides a customization variable ~project-butler-projects-list~
which is an association list using project directories as keys.

Each project directory is mapped to a string describing a window pattern (see
below) and a list of paths (files or directories) to be automatically opened.

Example:
#+begin_src emacs-lisp
  (customize-set-variable 'project-butler-projects-list
                          '(("~/my-projects/foo/" .     ; project
                             ("1|2"                     ; window pattern
                              ("foo.py" "README.md")))  ; path-list
                            ("~/my-projects/bar/" .
                             ("")
                             ("cargo.toml" "src/" "src/main.rs"))))
#+end_src

** Window pattern syntax

The pattern strings use a very simple syntax to describe the window layout and
where the automatically opened buffers are placed.

To be more specific, a window pattern string describes how to split and move
windows after opening files in the path-list. So it's actually a command
sequence. The following commands are valid:

- Digits :: In the current window, open a path in the path-list. 1 means the
  first path in the list, 2 means the second path and so on.
- '_' :: Split the current window below and move the point to the new window.
- '|' :: Split the current window to the right and move the point to the new
  window.
- '<' :: Move the point to the window to the left of the current window.
- '>' :: Move the point to the window to the right of the current window.
- 'v' :: Move the point to the window below the current window.
- '^' :: Move the point to the window above the current window.

Paths whose numbers are not explicitly mentioned in the pattern string are
not displayed. They're opened in the background, instead.

If window-pattern is nil or an empty string("") or not given, all files in
path-list will simply be opened in sequence, resulting in a single window
containing a buffer of the last path in the list.

*Examples:*

In the following examples, an example string is given, followed by a diagram of
the window layout, which buffer is opened where and where the point is ("*").
We assume a path list containing 5 paths. Paths not displayed in a window are
opened in the background.

- "1|2"

#+begin_src example
  |----|----|
  |    |    |
  | 1  | 2* |
  |    |    |
  |----|----|
#+end_src

- "1|2<"

#+begin_src example
  |----|----|
  |    |    |
  | 1* | 2  |
  |    |    |
  |----|----|
#+end_src

- "1_2|3^"

#+begin_src example
  |---------|
  |    1*   |
  |----|----|
  |  2 | 3  |
  |----|----|
#+end_src

- "1|2_3<"

#+begin_src example
  |----|----|
  |    | 2  |
  | 1* |----|
  |    | 3  |
  |----|----|
#+end_src

- "1_2"

#+begin_src example
  |---------|
  |    1    |
  |---------|
  |    2*   |
  |---------|
#+end_src

- "1|2_4<3"

#+begin_src example
  |----|----|
  | 1  | 2  |
  |----|----|
  | 3* | 4  |
  |----|----|
#+end_src

- ""

#+begin_src example
  |---------|
  |         |
  |    5*   |
  |         |
  |---------|
#+end_src

* Usage

** Opening projects
   Emacs' built-in =project.el= provides a couple of actions to take when
   switching to a projects, the ~project-switch-commands~ (usually bound to
   =C-x p p=).

   Project Butler adds one more option which calls ~project-butler-open~, which in
   turn not only opens the project but looks up the project path in your config
   (see [[* Basic Configuration][above]]) and opens buffers according to your settings.

   [[./images/open-buffers-option.png]]

   So the usual way to open a project using project butler is:

   1. =C-x p p= (project-switch-project)
   2. Pick your project in the minibuffer
   3. Hit =o= to have Project Butler open and lay out your buffers for you.

   If you try to do this for a project that you haven't configured (i.e. that
   has an empty ~path-list~), ~project-butler-open~ will open the project directory
   in dired.

#+HTML: <img src="images/demo-C-x-p-p-o.gif">

** Closing projects
   Project Butler will clean up for you, too. It provides the command
   ~project-butler-cleanup~, which will close all buffers specified in the path
   list. Additionally, it calls ~project-kill-buffers~, thus closing all the
   buffers belonging to the project. All window splits in the current frame
   are reverted, too.

* Recommended key binding

  Consider binding ~project-butler-cleanup~ to =C-x p k=, which is usually
  bound to ~project-kill-buffers~.

  #+begin_src emacs-lisp
    ;; Replace the binding C-x p k, originally bound to `project-kill-buffers'
    (keymap-set project-prefix-map "k" #'project-butler-cleanup)
  #+end_src

  Or on older Emacs versions:
 #+begin_src emacs-lisp
   (define-key project-prefix-map (kbd "k") #'project-butler-cleanup)
  #+end_src

* Customization

  - ~project-butler-projects-list~ (see [[* Basic Configuration][above]])
  - ~project-butler-confirm-cleanup~; Default: t
    Ask the user to confirm when using ~project-butler-cleanup~. Set to nil to
    ask no longer.
  - ~project-butler-add-open-command~; Default: t
    Add ~project-butler-open~ to the standard Emacs ~project-switch-commands~. Set
    to nil to prevent this.
  - ~project-butler-preparation~; Default: ='(delete-other-windows)=.
    By default, if you open a project in a frame that is already split
    into more than one window, project butler will first close those windows,
    so that your window pattern will take effect.
    You can customize this in several ways:
    - If you want to open a new frame instead, set it to ='(other-frame-prefix))=.
    - If you want to open your pattern inside the present split, set it to ='()=.
    - You can define a custom command here, too. More than one, in fact. It's a
      list of commands, after all. The butler will execute all of them. Whether
      your custom commands make sense in the context of opening a project is up
      to you.
  - ~project-butler-cleanup-commands~; Default: see below.
    The ~project-butler-cleanup~ in fact runs a list of commands. This list is
    customizable here.
    By default the following commands are run:
    - ~project-kill-buffers~ without asking for confirmation
    - ~delete-other-windows~

    Note: If you want to specify a command with optional parameters, you'll
    have to specify it as a lambda expression. For example, in the default, the
    no-confirm option for project-kill buffers is specified like this:
    #+begin_src emacs-lisp
      (customize-set-variable '((lambda () (project-kill-buffers :no-confirm))))
    #+end_src

* Support

  If you have questions, feel free to open an issue in the [[https://codeberg.org/jabbo/project-butler][git repo]].

* License

  [[file:LICENSE][GPL 3 or later]]

* Alternatives

I know of the following packages that serve similar purposes:

  - Karthink's [[https://github.com/karthink/project-x][project-x]]
    see also:
    [[https://karthinks.com/software/persistent-project-switching-in-emacs/][Persistent project switching in Emacs]]
  - alphapapa's [[https://github.com/alphapapa/activities.el][Activities]]
  - alphapapa's [[https://github.com/alphapapa/burly.el][burly]]

Especially Activities is very advanced and provides a lot of flexible and
different uses, and does a lot more then Project Butler.

** How is Project Butler different?

*** Integration with =project.el=

The first difference is its close integration with =project.el=. The other
packages are largely project-agnostic. And if you only care about defining
buffer and window arrangements, then one of the other packages might be a
better fit for your needs.

If (like me) you leverage =project.el= for a lot of small other things (like e.g.
providing scope to ripgrep), it might matter to you.

That said, it's probably easy to call the other packages' respective functions
(like =activities-resume=) via hook after switching projects.

*** "Your Desk as you left it" vs. "Return to a clean desk"

The other packages provide a “pick-off-where-you-left-it” approach: save and
resume. Project Butler declaratively defines a desired state with which to
start out.

So on first glance, it’s the difference between returning to your desk as you
have left it or returning to a clean desk.

But some of the other packages let you define a default state so you can return
to a clean desk, too.

So the real difference lies in the declarative nature of defining what you want.
Activities e.g. let’s you take a snapshot and make it default, project-butler
lets you declare what you want via text (i.e. in your emacs configuration).

If you like to declaratively configure your setup in text and reproduce it on
different machines, this might be preferable.
